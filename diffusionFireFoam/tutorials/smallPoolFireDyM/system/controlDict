/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  4.x                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version         2.0;
    format          ascii;
    class           dictionary;
    object          controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

libs
(
    "libOpenFOAM.so"
    "libmyDynamicMesh.so"
    "libmyDynamicFvMesh.so"
    "libmyRadiationModels.so"
    "libmyCombustionModels.so"
);

application     diffusionFireFoam;

startFrom       latestTime;

startTime       0.0;

stopAt          endTime;

endTime         20;

deltaT          1e-5;

writeControl    adjustableRunTime;

writeInterval   0.025;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression uncompressed;

timeFormat      general;

timePrecision   6;

graphFormat     raw;

runTimeModifiable yes;

adjustTimeStep  yes;

maxCo           0.4;

functions
{
    sQdot
    {
       libs ("libutilityFunctionObjects.so");

       type coded;
       name sQdot;

       codeExecute
       #{
          const volScalarField& Qdot = mesh().lookupObject<volScalarField>("Qdot");

          volScalarField q = Qdot;
          q -= min(q);
          q /= max(q);

          static autoPtr<volScalarField> pField;
          if(!pField.valid())
          {
              pField.set
              (
                  new volScalarField
                  (
                      IOobject
                      (
                          "sQ",
                          mesh().time().timeName(),
                          Qdot.mesh(),
                          IOobject::NO_READ,
                          IOobject::AUTO_WRITE
                      ),
                      q
                  )
              );
          }

          volScalarField& sQ = pField();

          sQ.checkIn();

          sQ = q;
      #};
    }
    
    vorticity
    {
       libs ("libutilityFunctionObjects.so");

       type coded;
       name vorticity;

       codeExecute
       #{
          const volVectorField& U = mesh().lookupObject<volVectorField>("U");

          volScalarField tvort = mag(fvc::curl(U));

          tvort -= min(tvort);
          tvort /= max(tvort);

          static autoPtr<volScalarField> pField;
          if(!pField.valid())
          {
              pField.set
              (
                  new volScalarField
                  (
                      IOobject
                      (
                          "sVort",
                          mesh().time().timeName(),
                          U.mesh(),
                          IOobject::NO_READ,
                          IOobject::AUTO_WRITE
                      ),
                      tvort
                  )
              );
          }

          volScalarField& sVort = pField();

          sVort.checkIn();

          sVort = tvort;
      #};
    }
}


// ************************************************************************* //
