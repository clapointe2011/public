/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  dev
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version         2.0;
    format          ascii;
    class           dictionary;
    object          controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

libs
(
    "libcustomFvPatchFields.so"
    "libmyCompressibleTurbulenceModels.so"
)

application     wildFireFoam;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         5;

deltaT          0.001;

writeControl    adjustableRunTime;

writeInterval   0.1;

purgeWrite      0;

writeFormat     binary;

writePrecision  6;

writeCompression off;

timeFormat      general;

timePrecision   6;

graphFormat     raw;

runTimeModifiable yes;

adjustTimeStep  yes;

maxCo           0.4;

maxDi           0.25;

maxDeltaT       1e-1;

OptimisationSwitches
{
    //- Parallel IO file handler
    //  uncollated (default), collated or masterUncollated
    fileHandler collated;
}

functions
{
    sQdot
    {
       libs ("libutilityFunctionObjects.so");

       type coded;
       name sQdot;

       codeOptions
       #{
          -I$(LIB_SRC)/finiteVolume/lnInclude
       #};

       codeInclude
       #{
           #include "fvcSmooth.H"
       #};

       codeExecute
       #{
          const volScalarField& Qdot = mesh().lookupObject<volScalarField>("Qdot");
          const volVectorField& U = mesh().lookupObject<volVectorField>("U");

          //Scaled HRR

          volScalarField q = Qdot;
          //q.ref() *= pow(mesh().V(),1/3);
          //fvc::smooth(q, 0.99);

          q -= min(q);
          q /= (max(q) + dimensionedScalar(q.dimensions(),VSMALL));

          static autoPtr<volScalarField> pField;
          if(!pField.valid())
          {
              pField.set
              (
                  new volScalarField
                  (
                      IOobject
                      (
                          "sQ",
                          mesh().time().timeName(),
                          Qdot.mesh(),
                          IOobject::NO_READ,
                          IOobject::AUTO_WRITE
                      ),
                      q
                  )
              );
          }

          volScalarField& sQ = pField();

          sQ.checkIn();

          sQ = q;

          //Scaled HRR gradient

          volScalarField varsq = mag(fvc::grad(q));
          //varsq.ref() *= pow(mesh().V(),1/3);
          //fvc::smooth(varsq, 0.99);

          varsq -= min(varsq);
          varsq /= max(varsq + dimensionedScalar(varsq.dimensions(),VSMALL));

          static autoPtr<volScalarField> pField1;
          if(!pField1.valid())
          {
              pField1.set
              (
                  new volScalarField
                  (
                      IOobject
                      (
                          "varsQ",
                          mesh().time().timeName(),
                          Qdot.mesh(),
                          IOobject::NO_READ,
                          IOobject::AUTO_WRITE
                      ),
                      varsq
                  )
              );
          }

          volScalarField& varsQ = pField1();

          varsQ.checkIn();

          varsQ = varsq;

          //Scaled vorticity/enstrophy

          volScalarField tvort = 0.5*magSqr(fvc::curl(U));
          //volScalarField tvort = mag(fvc::curl(U));
          //tvort.ref() *= pow(mesh().V(),1/3);
          //fvc::smooth(tvort, 0.99);

          tvort -= min(tvort);
          tvort /= max(tvort);

          static autoPtr<volScalarField> pField2;
          if(!pField2.valid())
          {
              pField2.set
              (
                  new volScalarField
                  (
                      IOobject
                      (
                          "sV",
                          mesh().time().timeName(),
                          U.mesh(),
                          IOobject::NO_READ,
                          IOobject::AUTO_WRITE
                      ),
                      tvort
                  )
              );
          }

          volScalarField& sV = pField2();

          sV.checkIn();

          sV = tvort;
      #};
    }
}

// ************************************************************************* //
