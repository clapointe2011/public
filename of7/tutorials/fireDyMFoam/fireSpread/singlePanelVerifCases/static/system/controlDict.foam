/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  4.x                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version         2.0;
    format          ascii;
    class           dictionary;
    object          controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

libs
(
);

application     fireFoam;

startFrom       latestTime;

startTime       0.0;

stopAt          endTime;

endTime         15.0;

deltaT          1e-3;

writeControl    adjustableRunTime;

writeInterval   0.1;

purgeWrite      0;

writeFormat     binary;

writePrecision  12;

writeCompression uncompressed;

timeFormat      general;

timePrecision   6;

graphFormat     raw;

runTimeModifiable yes;

adjustTimeStep  yes;

maxCo           0.5;

maxDi           0.25;

OptimisationSwitches
{
    //- Parallel IO file handler
    //  uncollated (default), collated or masterUncollated
    fileHandler collated;
}

functions
{
    /*vorticity
    {
       libs ("libutilityFunctionObjects.so");

       type coded;
       name sVorticity;

       codeExecute
       #{
          const volVectorField& U = mesh().lookupObject<volVectorField>("U");

          volScalarField tvort = 0.5*magSqr(fvc::curl(U));
          //volScalarField tvort = mag(fvc::curl(U));
          tvort.ref() *= pow(mesh().V(),1/3);

          tvort -= min(tvort);
          tvort /= max(tvort);

          static autoPtr<volScalarField> pField;
          if(!pField.valid())
          {
              pField.set
              (
                  new volScalarField
                  (
                      IOobject
                      (
                          "sV",
                          mesh().time().timeName(),
                          U.mesh(),
                          IOobject::NO_READ,
                          IOobject::AUTO_WRITE
                      ),
                      tvort
                  )
              );
          }

          volScalarField& sV = pField();

          sV.checkIn();

          sV = tvort;
      #};
    }

    sQdot
    {
       libs ("libutilityFunctionObjects.so");

       type coded;
       name sQdot;

       codeExecute
       #{
          const volScalarField& Qdot = mesh().lookupObject<volScalarField>("Qdot");

          volScalarField q = Qdot;
          q.ref() *= pow(mesh().V(),1/3);

          q -= min(q);
          q /= (max(q) + dimensionedScalar(q.dimensions(),SMALL));

          static autoPtr<volScalarField> pField;
          if(!pField.valid())
          {
              pField.set
              (
                  new volScalarField
                  (
                      IOobject
                      (
                          "sQ",
                          mesh().time().timeName(),
                          Qdot.mesh(),
                          IOobject::NO_READ,
                          IOobject::AUTO_WRITE
                      ),
                      q
                  )
              );
          }

          volScalarField& sQ = pField();

          sQ.checkIn();

          sQ = q;

          volScalarField varsq = mag(fvc::grad(q));
          varsq.ref() *= pow(mesh().V(),1/3);

          varsq -= min(varsq);
          varsq /= (max(varsq) + dimensionedScalar(varsq.dimensions(),SMALL));

          static autoPtr<volScalarField> pField1;
          if(!pField1.valid())
          {
              pField1.set
              (
                  new volScalarField
                  (
                      IOobject
                      (
                          "varsQ",
                          mesh().time().timeName(),
                          Qdot.mesh(),
                          IOobject::NO_READ,
                          IOobject::AUTO_WRITE
                      ),
                      varsq
                  )
              );
          }

          volScalarField& varsQ = pField1();

          varsQ.checkIn();

          varsQ = varsq;
      #};
    }*/
}


// ************************************************************************* //
