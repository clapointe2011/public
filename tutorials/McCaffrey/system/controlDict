/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  4.x                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version         2.0;
    format          ascii;
    class           dictionary;
    object          controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

libs ( "libOpenFOAM.so" "libcustomFvPatchFields.so" ) ;

application     diffusionFireFoam;

startFrom       latestTime;

startTime       0.0;

stopAt          endTime;

endTime         45;

deltaT          1e-5;

writeControl    adjustableRunTime;

writeInterval   0.025;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression uncompressed;

timeFormat      general;

timePrecision   6;

graphFormat     raw;

runTimeModifiable yes;

adjustTimeStep  yes;

maxCo           0.4;

OptimisationSwitches
{
    //- Parallel IO file handler
    //  uncollated (default), collated or masterUncollated
    fileHandler collated;
}

functions
{
    /*varRho
    {
       libs ("libutilityFunctionObjects.so");
        
       type coded;
       name varRho;

       codeExecute
       #{ 
          const volScalarField& rho = mesh().lookupObject<volScalarField>("rho");
          
          volVectorField gradRho = fvc::grad(rho);
          volScalarField vRho = mag(gradRho.component(0)) + mag(gradRho.component(1)) + mag(gradRho.component(2));
          vRho.ref() *= pow(mesh().V(),1/3);
          //volScalarField vRho = mag(fvc::grad(rho));
          vRho -= min(vRho);
          vRho /= max(vRho);
          
          static autoPtr<volScalarField> pField;
          if(!pField.valid())
          {
              pField.set
              (
                  new volScalarField
                  (
                      IOobject
                      (
                          "varRho",
                          mesh().time().timeName(),
                          rho.mesh(),
                          IOobject::NO_READ,
                          IOobject::AUTO_WRITE
                      ),
                      vRho
                  )
              );
          }
          
          volScalarField& varRho = pField();
          
          varRho.checkIn();
          
          varRho = vRho;
      #};
    }*/
    
    sQdot
    {
       libs ("libutilityFunctionObjects.so");

       type coded;
       name sQdot;

       codeExecute
       #{
          const volScalarField& Qdot = mesh().lookupObject<volScalarField>("Qdot");

          volScalarField q = Qdot;
          q -= min(q);
          q /= max(q);

          static autoPtr<volScalarField> pField;
          if(!pField.valid())
          {
              pField.set
              (
                  new volScalarField
                  (
                      IOobject
                      (
                          "sQ",
                          mesh().time().timeName(),
                          Qdot.mesh(),
                          IOobject::NO_READ,
                          IOobject::AUTO_WRITE
                      ),
                      q
                  )
              );
          }

          volScalarField& sQ = pField();

          sQ.checkIn();

          sQ = q;
      #};
    }

    vorticity
    {
       libs ("libutilityFunctionObjects.so");

       type coded;
       name vorticity;

       codeExecute
       #{
          const volVectorField& U = mesh().lookupObject<volVectorField>("U");

          //volVectorField vort = fvc::curl(U);
          //volScalarField tvort = mag(vort.component(0)) + mag(vort.component(1)) + mag(vort.component(2));
          //tvort.ref() *= pow(mesh().V(),1/3);
          volScalarField tvort = mag(fvc::curl(U));

          tvort -= min(tvort);
          tvort /= max(tvort);

          static autoPtr<volScalarField> pField;
          if(!pField.valid())
          {
              pField.set
              (
                  new volScalarField
                  (
                      IOobject
                      (
                          "varVort",
                          mesh().time().timeName(),
                          U.mesh(),
                          IOobject::NO_READ,
                          IOobject::AUTO_WRITE
                      ),
                      tvort
                  )
              );
          }

          volScalarField& varVort = pField();

          varVort.checkIn();

          varVort = tvort;
      #};
    }
    
    /*sEnst
    {
       libs ("libutilityFunctionObjects.so");

       type coded;
       name sEnst;

       codeExecute
       #{
          const volVectorField& U = mesh().lookupObject<volVectorField>("U");

          volScalarField tEnst = 0.5*magSqr(fvc::curl(U));

          tEnst -= min(tEnst);
          tEnst /= max(tEnst);

          static autoPtr<volScalarField> pField;
          if(!pField.valid())
          {
              pField.set
              (
                  new volScalarField
                  (
                      IOobject
                      (
                          "sEnst",
                          mesh().time().timeName(),
                          U.mesh(),
                          IOobject::NO_READ,
                          IOobject::AUTO_WRITE
                      ),
                      tEnst
                  )
              );
          }

          volScalarField& sEnst = pField();

          sEnst.checkIn();

          sEnst = tEnst;
      #};
    }*/
    
    /*sRate
    {
       libs ("libutilityFunctionObjects.so");

       type coded;
       name sRate;

       codeExecute
       #{
          const volVectorField& U = mesh().lookupObject<volVectorField>("U");

          volScalarField tRate = sqrt(2.0)*mag(symm(fvc::grad(U)));

          tRate -= min(tRate);
          tRate /= max(tRate);

          static autoPtr<volScalarField> pField;
          if(!pField.valid())
          {
              pField.set
              (
                  new volScalarField
                  (
                      IOobject
                      (
                          "sRate",
                          mesh().time().timeName(),
                          U.mesh(),
                          IOobject::NO_READ,
                          IOobject::AUTO_WRITE
                      ),
                      tRate
                  )
              );
          }

          volScalarField& sRate = pField();

          sRate.checkIn();

          sRate = tRate;
      #};
    }*/   
}


// ************************************************************************* //
