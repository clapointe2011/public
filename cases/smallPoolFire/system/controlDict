/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  4.x                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version         2.0;
    format          ascii;
    class           dictionary;
    object          controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

libs ( "libOpenFOAM.so" ) ;

application     diffusionFireFoam;

startFrom       latestTime;

startTime       0.0;

stopAt          endTime;

endTime         20;

deltaT          1e-5;

writeControl    adjustableRunTime;

writeInterval   0.025;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression uncompressed;

timeFormat      general;

timePrecision   6;

graphFormat     raw;

runTimeModifiable yes;

adjustTimeStep  yes;

maxCo           0.4;

functions
{   
    /*varRho
    {
       libs ("libutilityFunctionObjects.so");
        
       type coded;
       name varRho;

       codeExecute
       #{ 
          const volScalarField& rho = mesh().lookupObject<volScalarField>("rho");
          
          //volVectorField gradRho = fvc::grad(rho);
          //volScalarField divRho = mag(gradRho.component(0)) + mag(gradRho.component(1)) + mag(gradRho.component(2));
          //divRho.ref() *= pow(mesh().V(),1/3);
          volScalarField divRho = mag(fvc::grad(rho));
          divRho -= min(divRho);
          divRho /= max(divRho);
          
          static autoPtr<volScalarField> pField;
          if(!pField.valid())
          {
              pField.set
              (
                  new volScalarField
                  (
                      IOobject
                      (
                          "varRho",
                          mesh().time().timeName(),
                          rho.mesh(),
                          IOobject::NO_READ,
                          IOobject::AUTO_WRITE
                      ),
                      divRho
                  )
              );
          }
          
          volScalarField& varRho = pField();
          
          varRho.checkIn();
          
          varRho = divRho;
      #};
    }*/
    
    /*Enstrophy
    {
       libs ("libutilityFunctionObjects.so");

       type coded;
       name Enstrophy;

       codeExecute
       #{
          const volVectorField& U = mesh().lookupObject<volVectorField>("U");

          volScalarField tenst = 0.5*magSqr(fvc::curl(U));

          tenst -= min(tenst);
          tenst /= max(tenst);

          static autoPtr<volScalarField> pField;
          if(!pField.valid())
          {
              pField.set
              (
                  new volScalarField
                  (
                      IOobject
                      (
                          "sEnst",
                          mesh().time().timeName(),
                          U.mesh(),
                          IOobject::NO_READ,
                          IOobject::AUTO_WRITE
                      ),
                      tenst
                  )
              );
          }

          volScalarField& sEnst = pField();

          sEnst.checkIn();

          sEnst = tenst;
      #};
    }*/
    
    /*gradCH4
    {
       libs ("libutilityFunctionObjects.so");

       type coded;
       name gradCH4;

       codeExecute
       #{
          const volScalarField& CH4 = mesh().lookupObject<volScalarField>("CH4");

          volScalarField tS = mag(fvc::grad(CH4));

          tS -= min(tS);
          tS /= max(tS);

          static autoPtr<volScalarField> pField;
          if(!pField.valid())
          {
              pField.set
              (
                  new volScalarField
                  (
                      IOobject
                      (
                          "gradCH4",
                          mesh().time().timeName(),
                          CH4.mesh(),
                          IOobject::NO_READ,
                          IOobject::AUTO_WRITE
                      ),
                      tS
                  )
              );
          }

          volScalarField& gradCH4 = pField();

          gradCH4.checkIn();

          gradCH4 = tS;
      #};
    }*/
    
    sRate
    {
       libs ("libutilityFunctionObjects.so");

       type coded;
       name sRate;

       codeExecute
       #{
          const volVectorField& U = mesh().lookupObject<volVectorField>("U");

          volScalarField tS = mag(symm(fvc::grad(U)));

          tS -= min(tS);
          tS /= max(tS);

          static autoPtr<volScalarField> pField;
          if(!pField.valid())
          {
              pField.set
              (
                  new volScalarField
                  (
                      IOobject
                      (
                          "sRate",
                          mesh().time().timeName(),
                          U.mesh(),
                          IOobject::NO_READ,
                          IOobject::AUTO_WRITE
                      ),
                      tS
                  )
              );
          }

          volScalarField& sRate = pField();

          sRate.checkIn();

          sRate = tS;
      #};
    }
    
    /*rRho
    {
       libs ("libutilityFunctionObjects.so");
        
       type coded;
       name rRho;

       codeExecute
       #{
          const volScalarField& rho = mesh().lookupObject<volScalarField>("rho");
          
          volScalarField rrho = 1/(rho + dimensionedScalar("VSMALL",dimDensity,VSMALL));
          rrho -= min(rrho);
          rrho /= max(rrho);
          
          static autoPtr<volScalarField> pField;
          if(!pField.valid())
          {
              pField.set
              (
                  new volScalarField
                  (
                      IOobject
                      (
                          "rRho",
                          mesh().time().timeName(),
                          rho.mesh(),
                          IOobject::NO_READ,
                          IOobject::AUTO_WRITE
                      ),
                      rrho
                  )
              );
          }
          
          volScalarField& rRho = pField();
          
          rRho.checkIn();
          
          rRho = rrho;
      #};
    }*/
    
    /*sQdot
    {
       libs ("libutilityFunctionObjects.so");
        
       type coded;
       name sQdot;

       codeExecute
       #{
          const volScalarField& Qdot = mesh().lookupObject<volScalarField>("Qdot");
          
          volScalarField qdot = Qdot;
          qdot -= min(qdot);
          qdot /= max(qdot);
          
          static autoPtr<volScalarField> pField;
          if(!pField.valid())
          {
              pField.set
              (
                  new volScalarField
                  (
                      IOobject
                      (
                          "sQdot",
                          mesh().time().timeName(),
                          Qdot.mesh(),
                          IOobject::NO_READ,
                          IOobject::AUTO_WRITE
                      ),
                      qdot
                  )
              );
          }
          
          volScalarField& sQdot = pField();
          
          sQdot.checkIn();
          
          sQdot = qdot;
      #};
    }*/
}


// ************************************************************************* //
